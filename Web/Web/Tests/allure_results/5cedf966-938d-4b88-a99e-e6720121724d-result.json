{"name": "test_Validate_submitting_the_Contact_Form_in_Contact_page_by_not_providing_any_details", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: Thanks for the message!!\nMessage: unexpected alert open: {Alert text : Thanks for the message!!}\n  (Session info: chrome=109.0.5414.120)\nStacktrace:\nBacktrace:\n\t(No symbol) [0x004F6643]\n\t(No symbol) [0x0048BE21]\n\t(No symbol) [0x0038DA9D]\n\t(No symbol) [0x003F73A5]\n\t(No symbol) [0x003DFB76]\n\t(No symbol) [0x003B49C1]\n\t(No symbol) [0x003B5E5D]\n\tGetHandleVerifier [0x0076A142+2497106]\n\tGetHandleVerifier [0x007985D3+2686691]\n\tGetHandleVerifier [0x0079BB9C+2700460]\n\tGetHandleVerifier [0x005A3B10+635936]\n\t(No symbol) [0x00494A1F]\n\t(No symbol) [0x0049A418]\n\t(No symbol) [0x0049A505]\n\t(No symbol) [0x004A508B]\n\tBaseThreadInitThunk [0x76A800F9+25]\n\tRtlGetAppContainerNamedObjectPath [0x77407BBE+286]\n\tRtlGetAppContainerNamedObjectPath [0x77407B8E+238]", "trace": "self = <Web.Utils.utils.Utils object at 0x00000210CE655CF0>, expected = 'Please fill out properly.', actual = 'Thanks for the message!!'\n\n    @allure.step\n    @allure.description('This validation method, if the assert failed it will take screenshot')\n    def assertion(self, expected, actual):\n        driver = self.driver\n        try:\n>           assert expected == actual\nE           AssertionError\n\n..\\Utils\\utils.py:16: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <Web.Tests.test_contact.Test_Contact object at 0x00000210CE4CF2E0>\n\n    @allure.description('Display Error message for not providing the details')\n    @pytest.mark.sanity\n    @allure.severity(allure.severity_level.CRITICAL)\n    def test_Validate_submitting_the_Contact_Form_in_Contact_page_by_not_providing_any_details(self):\n        driver = self.driver\n        contact = Contact_Page(driver)\n        contact.open_Main_page()\n        contact.click_Contact_option()\n        contact.click_Send_Message()\n>       contact.Assert_alert_Error_message()  # need to be error message\n\ntest_contact.py:55: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\Pages\\contact_page.py:98: in Assert_alert_Error_message\n    Utils(self.driver).assertion(self.ERROR_TEXT, alert_text)\n..\\Utils\\utils.py:18: in assertion\n    allure.attach(driver.get_screenshot_as_png(), name='screenShot',attachment_type=AttachmentType.PNG)\n..\\..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:926: in get_screenshot_as_png\n    return b64decode(self.get_screenshot_as_base64().encode(\"ascii\"))\n..\\..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:937: in get_screenshot_as_base64\n    return self.execute(Command.SCREENSHOT)[\"value\"]\n..\\..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:440: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000210CE657700>\nresponse = {'status': 500, 'value': '{\"value\":{\"data\":{\"text\":\"Thanks for the message!!\"},\"error\":\"unexpected alert open\",\"messag...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77407BBE+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77407B8E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n>           raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\nE           selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: Thanks for the message!!\nE           Message: unexpected alert open: {Alert text : Thanks for the message!!}\nE             (Session info: chrome=109.0.5414.120)\nE           Stacktrace:\nE           Backtrace:\nE           \t(No symbol) [0x004F6643]\nE           \t(No symbol) [0x0048BE21]\nE           \t(No symbol) [0x0038DA9D]\nE           \t(No symbol) [0x003F73A5]\nE           \t(No symbol) [0x003DFB76]\nE           \t(No symbol) [0x003B49C1]\nE           \t(No symbol) [0x003B5E5D]\nE           \tGetHandleVerifier [0x0076A142+2497106]\nE           \tGetHandleVerifier [0x007985D3+2686691]\nE           \tGetHandleVerifier [0x0079BB9C+2700460]\nE           \tGetHandleVerifier [0x005A3B10+635936]\nE           \t(No symbol) [0x00494A1F]\nE           \t(No symbol) [0x0049A418]\nE           \t(No symbol) [0x0049A505]\nE           \t(No symbol) [0x004A508B]\nE           \tBaseThreadInitThunk [0x76A800F9+25]\nE           \tRtlGetAppContainerNamedObjectPath [0x77407BBE+286]\nE           \tRtlGetAppContainerNamedObjectPath [0x77407B8E+238]\n\n..\\..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:244: UnexpectedAlertPresentException"}, "description": "Display Error message for not providing the details", "steps": [{"name": "open_Main_page", "status": "passed", "start": 1675123233163, "stop": 1675123233163}, {"name": "click_Contact_option", "status": "passed", "steps": [{"name": "assertion", "status": "passed", "parameters": [{"name": "expected", "value": "'STORE'"}, {"name": "actual", "value": "'STORE'"}], "start": 1675123235255, "stop": 1675123235255}], "start": 1675123233163, "stop": 1675123235255}, {"name": "click_Send_Message", "status": "passed", "start": 1675123235255, "stop": 1675123237319}, {"name": "Assert_alert_Error_message", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: Thanks for the message!!\nMessage: unexpected alert open: {Alert text : Thanks for the message!!}\n  (Session info: chrome=109.0.5414.120)\nStacktrace:\nBacktrace:\n\t(No symbol) [0x004F6643]\n\t(No symbol) [0x0048BE21]\n\t(No symbol) [0x0038DA9D]\n\t(No symbol) [0x003F73A5]\n\t(No symbol) [0x003DFB76]\n\t(No symbol) [0x003B49C1]\n\t(No symbol) [0x003B5E5D]\n\tGetHandleVerifier [0x0076A142+2497106]\n\tGetHandleVerifier [0x007985D3+2686691]\n\tGetHandleVerifier [0x0079BB9C+2700460]\n\tGetHandleVerifier [0x005A3B10+635936]\n\t(No symbol) [0x00494A1F]\n\t(No symbol) [0x0049A418]\n\t(No symbol) [0x0049A505]\n\t(No symbol) [0x004A508B]\n\tBaseThreadInitThunk [0x76A800F9+25]\n\tRtlGetAppContainerNamedObjectPath [0x77407BBE+286]\n\tRtlGetAppContainerNamedObjectPath [0x77407B8E+238]\n\n", "trace": "  File \"C:\\Users\\user\\QA_Automation\\2023_Final_Project\\venv\\lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\user\\QA_Automation\\2023_Final_Project\\Web\\Pages\\contact_page.py\", line 98, in Assert_alert_Error_message\n    Utils(self.driver).assertion(self.ERROR_TEXT, alert_text)\n  File \"C:\\Users\\user\\QA_Automation\\2023_Final_Project\\venv\\lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\user\\QA_Automation\\2023_Final_Project\\Web\\Utils\\utils.py\", line 18, in assertion\n    allure.attach(driver.get_screenshot_as_png(), name='screenShot',attachment_type=AttachmentType.PNG)\n  File \"C:\\Users\\user\\QA_Automation\\2023_Final_Project\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 926, in get_screenshot_as_png\n    return b64decode(self.get_screenshot_as_base64().encode(\"ascii\"))\n  File \"C:\\Users\\user\\QA_Automation\\2023_Final_Project\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 937, in get_screenshot_as_base64\n    return self.execute(Command.SCREENSHOT)[\"value\"]\n  File \"C:\\Users\\user\\QA_Automation\\2023_Final_Project\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 440, in execute\n    self.error_handler.check_response(response)\n  File \"C:\\Users\\user\\QA_Automation\\2023_Final_Project\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 244, in check_response\n    raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n"}, "steps": [{"name": "assertion", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: Thanks for the message!!\nMessage: unexpected alert open: {Alert text : Thanks for the message!!}\n  (Session info: chrome=109.0.5414.120)\nStacktrace:\nBacktrace:\n\t(No symbol) [0x004F6643]\n\t(No symbol) [0x0048BE21]\n\t(No symbol) [0x0038DA9D]\n\t(No symbol) [0x003F73A5]\n\t(No symbol) [0x003DFB76]\n\t(No symbol) [0x003B49C1]\n\t(No symbol) [0x003B5E5D]\n\tGetHandleVerifier [0x0076A142+2497106]\n\tGetHandleVerifier [0x007985D3+2686691]\n\tGetHandleVerifier [0x0079BB9C+2700460]\n\tGetHandleVerifier [0x005A3B10+635936]\n\t(No symbol) [0x00494A1F]\n\t(No symbol) [0x0049A418]\n\t(No symbol) [0x0049A505]\n\t(No symbol) [0x004A508B]\n\tBaseThreadInitThunk [0x76A800F9+25]\n\tRtlGetAppContainerNamedObjectPath [0x77407BBE+286]\n\tRtlGetAppContainerNamedObjectPath [0x77407B8E+238]\n\n", "trace": "  File \"C:\\Users\\user\\QA_Automation\\2023_Final_Project\\venv\\lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\user\\QA_Automation\\2023_Final_Project\\Web\\Utils\\utils.py\", line 18, in assertion\n    allure.attach(driver.get_screenshot_as_png(), name='screenShot',attachment_type=AttachmentType.PNG)\n  File \"C:\\Users\\user\\QA_Automation\\2023_Final_Project\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 926, in get_screenshot_as_png\n    return b64decode(self.get_screenshot_as_base64().encode(\"ascii\"))\n  File \"C:\\Users\\user\\QA_Automation\\2023_Final_Project\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 937, in get_screenshot_as_base64\n    return self.execute(Command.SCREENSHOT)[\"value\"]\n  File \"C:\\Users\\user\\QA_Automation\\2023_Final_Project\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 440, in execute\n    self.error_handler.check_response(response)\n  File \"C:\\Users\\user\\QA_Automation\\2023_Final_Project\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 244, in check_response\n    raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n"}, "parameters": [{"name": "expected", "value": "'Please fill out properly.'"}, {"name": "actual", "value": "'Thanks for the message!!'"}], "start": 1675123237327, "stop": 1675123237333}], "start": 1675123237319, "stop": 1675123237335}], "attachments": [{"name": "stdout", "source": "806e2c5d-2df6-4aa7-85f1-ceadf9f9f926-attachment.txt", "type": "text/plain"}], "start": 1675123233163, "stop": 1675123237337, "uuid": "9a3b402f-128c-4aac-8f97-9b14756e6e42", "historyId": "d03525caffe85268fc410c4998755b1e", "testCaseId": "a537c4742c61fa90b5e8101e51d04ade", "fullName": "test_contact.Test_Contact#test_Validate_submitting_the_Contact_Form_in_Contact_page_by_not_providing_any_details", "labels": [{"name": "severity", "value": "critical"}, {"name": "tag", "value": "sanity"}, {"name": "suite", "value": "test_contact"}, {"name": "subSuite", "value": "Test_Contact"}, {"name": "host", "value": "LAPTOP-42FB6NAB"}, {"name": "thread", "value": "25980-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_contact"}]}